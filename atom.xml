<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[X1a0 L0nG's]]></title>
  <subtitle><![CDATA[登高自卑，行远自迩]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.xiaol.me//"/>
  <updated>2015-07-12T15:00:58.639Z</updated>
  <id>http://blog.xiaol.me//</id>
  
  <author>
    <name><![CDATA[X1a0 L0nG]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何通过JS获取本地JPG图片的高宽]]></title>
    <link href="http://blog.xiaol.me/2014/12/24/how-to-get-dimension-of-a-local-jpg-file-via-js/"/>
    <id>http://blog.xiaol.me/2014/12/24/how-to-get-dimension-of-a-local-jpg-file-via-js/</id>
    <published>2014-12-24T13:13:18.000Z</published>
    <updated>2015-07-12T15:00:58.639Z</updated>
    <content type="html"><![CDATA[<p>做个绘制SVG描边动画的Web App这个脑洞已经打开了很久了，但是一个月工时顶平常两个月这种状态持续太久，所以一直没来得及动手。现在终于可以开始着手做了。</p>
<p>既然是描边动画，那么SVG的viewBox参数最好和背景图片的高宽是一致的，这样等比缩放时，SVG的path不至于乱掉。作为一个后台开发，玩前端总是容易遇到各种问题，那么第一个问题来了，如何通过JS获取本地JPG图片的高宽呢？</p>
<p>因为input file拿不到真实的本地文件地址，所以期望input file拿到图片本地地址传给img src然后看高宽是不行的，然后在查W3C File API时看到了FileReader。</p>
<a id="more"></a>
<p>FileReader是W3C File API中定义的一个接口，<a href="http://www.w3.org/TR/FileAPI/#dfn-filereader" target="_blank" rel="external">接口完整定义看这里</a>，只要不是古董浏览器就都有它的实现。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async read methods</span></span><br><span class="line"><span class="keyword">void</span> readAsArrayBuffer(Blob blob);</span><br><span class="line"><span class="keyword">void</span> readAsText(Blob blob, optional DOMString label);</span><br><span class="line"><span class="keyword">void</span> readAsDataURL(Blob blob);</span><br></pre></td></tr></table></figure>
<p>第一眼就看到了readAsDataURL方法，将本地图片读成dataURL再放入img然后读高宽很简单嘛。于是方法一就出来了：</p>
<h5 id="方法一">方法一</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fileChooser = <span class="built_in">document</span>.getElementById(<span class="string">'filechooser'</span>);</span><br><span class="line">fileChooser.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    img.src = e.target.result;</span><br><span class="line">    <span class="built_in">console</span>.log(img.width);</span><br><span class="line">    <span class="built_in">console</span>.log(img.height);</span><br><span class="line">  &#125;;</span><br><span class="line">  reader.readAsDataURL(evt.target.files[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很可惜的是这样在FireFox中不兼容，读出来的高宽为0，需要将img追加进DOM才能读出高宽来。shemegui…完全不能接受啊…</p>
<p>于是看到了readAsArrayBuffer方法，能把图片读成binary data buffer，脑洞开一开，完全可以自己解析jpg图片格式的嘛。</p>
<p>jpeg格式标准是这样的,二进制数据由两个字节的标记位的来分块，前一个字节是0xFF，后一个字节标记不同分块如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SOI 0xD8　 图像开始<span class="operator"><span class="keyword">Start</span> <span class="keyword">of</span> Image</span><br><span class="line">　APP0 <span class="number">0xE0</span>　 JFIF应用数据块 Application <span class="number">0</span></span><br><span class="line">　APPn <span class="number">0xE1</span> - <span class="number">0xEF</span>　 其他的应用数据块 Application(n, <span class="number">1</span>～<span class="number">15</span>)</span><br><span class="line">　DQT <span class="number">0xDB</span>　 量化表 Difine Quantization <span class="keyword">Table</span></span><br><span class="line">　SOF0 <span class="number">0xC0</span>　 帧开始 <span class="keyword">Start</span> <span class="keyword">of</span> Frame</span><br><span class="line">　DHT <span class="number">0xC4</span>　 霍夫曼表 Difine Huffman <span class="keyword">Table</span></span><br><span class="line">　SOS <span class="number">0xDA</span>　 扫描线开始 <span class="keyword">Start</span> <span class="keyword">of</span> Scan</span><br><span class="line">　EOI <span class="number">0xD9</span>　 图像结束 <span class="keyword">End</span> <span class="keyword">of</span> Image</span></span><br></pre></td></tr></table></figure></p>
<p>SOF的第6和第7字节标记图片高度，第8第9字节标记图片宽度。这样定位FileReader读出来的二进制数据数组就能拿到高宽了。</p>
<p>readAsArrayBuffer读出来是个ArrayBuffer对象，该对象定义可参考<a href="https://www.khronos.org/registry/typedarray/specs/latest/#5" target="_blank" rel="external">khronos组织定义的Typed Array</a>或<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="external">ES6 draft中的定义</a></p>
<p>而要真正访问这个数据则需要用到DataView，可参考<a href="https://www.khronos.org/registry/typedarray/specs/latest/#8" target="_blank" rel="external">khronos这里</a>或<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="external">ES6 draft这里</a></p>
<p>ES5中似乎没看到这两个对象的定义，所以，放弃古董浏览器吧。</p>
<h5 id="方法二">方法二</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fileChooser = <span class="built_in">document</span>.getElementById(<span class="string">'filechooser'</span>);</span><br><span class="line">fileChooser.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(getImgDimension(<span class="keyword">new</span> <span class="built_in">DataView</span>(e.target.result)));</span><br><span class="line">  &#125;;</span><br><span class="line">  reader.readAsArrayBuffer(evt.target.files[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgDimension</span>(<span class="params">dataView</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((dataView.getUint8(<span class="number">0</span>) != <span class="number">0xFF</span>) || (dataView.getUint8(<span class="number">1</span>) != <span class="number">0xD8</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//SOI标记位不对，不是jpg图片</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> offset = <span class="number">2</span>, length = dataView.byteLength, marker;</span><br><span class="line">  <span class="keyword">while</span> (offset &lt; length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dataView.getUint8(offset) != <span class="number">0xFF</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//不是图片标记位</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    marker = dataView.getUint8(offset + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(marker.toString(<span class="number">16</span>));</span><br><span class="line">    <span class="keyword">if</span> (marker == <span class="number">0xC0</span>) &#123;</span><br><span class="line">      <span class="comment">//标记位0xC0表示图片帧SOF开始</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        height : dataView.getUint16(offset + <span class="number">5</span>),</span><br><span class="line">        width : dataView.getUint16(offset + <span class="number">7</span>)</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 非图片帧则跳过该分块，每个分块的长度由该分块第3第4两个字节标识</span></span><br><span class="line">      offset += <span class="number">2</span> + dataView.getUint16(offset + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>能拿到本地文件的二进制数据，感觉浏览器能做的事情又多了很多啊。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>做个绘制SVG描边动画的Web App这个脑洞已经打开了很久了，但是一个月工时顶平常两个月这种状态持续太久，所以一直没来得及动手。现在终于可以开始着手做了。</p>
<p>既然是描边动画，那么SVG的viewBox参数最好和背景图片的高宽是一致的，这样等比缩放时，SVG的path不至于乱掉。作为一个后台开发，玩前端总是容易遇到各种问题，那么第一个问题来了，如何通过JS获取本地JPG图片的高宽呢？</p>
<p>因为input file拿不到真实的本地文件地址，所以期望input file拿到图片本地地址传给img src然后看高宽是不行的，然后在查W3C File API时看到了FileReader。</p>]]>
    
    </summary>
    
      <category term="DataView" scheme="http://blog.xiaol.me/tags/DataView/"/>
    
      <category term="FileReader" scheme="http://blog.xiaol.me/tags/FileReader/"/>
    
      <category term="height" scheme="http://blog.xiaol.me/tags/height/"/>
    
      <category term="javascript" scheme="http://blog.xiaol.me/tags/javascript/"/>
    
      <category term="jpg" scheme="http://blog.xiaol.me/tags/jpg/"/>
    
      <category term="jpg dimension" scheme="http://blog.xiaol.me/tags/jpg-dimension/"/>
    
      <category term="width" scheme="http://blog.xiaol.me/tags/width/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为你的ghost加上disqus]]></title>
    <link href="http://blog.xiaol.me/2014/09/18/add-disqus-to-your-ghost/"/>
    <id>http://blog.xiaol.me/2014/09/18/add-disqus-to-your-ghost/</id>
    <published>2014-09-18T12:10:18.000Z</published>
    <updated>2015-07-12T13:40:09.999Z</updated>
    <content type="html"><![CDATA[<p>如果你想为你的Ghost博客带来一点社交化的属性，偏偏Ghost官方并没有提供评论功能，而你自己也懒得写一套评论系统，那么使用第三方评论托管，是个不错的选择。<br><a id="more"></a><br><a href="https://disqus.com/" target="_blank" rel="external"><strong>Disqus</strong></a>就是这样一家第三方评论系统, 为你的网站提供评论托管服务。</p>
<p>它的使用很简单，比如，如果你希望评论框附加在每篇文章的最下方，那么以默认主题casper为例：</p>
<p>打开themes/caper/post.hbs， 在<code>footer</code>标签下方添加以下html：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"disqus_thread"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">	<span class="keyword">var</span> disqus_shortname = <span class="string">'x1a0l0ng'</span>;</span><br><span class="line">	<span class="keyword">var</span> disqus_identifier = <span class="string">'&#123;&#123;url absolute=false&#125;&#125;'</span>;</span><br><span class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> dsq = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); dsq.type = <span class="string">'text/javascript'</span>; dsq.async = <span class="literal">true</span>;</span><br><span class="line">		dsq.src = <span class="string">'//'</span> + disqus_shortname + <span class="string">'.disqus.com/embed.js'</span>;</span><br><span class="line">		(<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(dsq);</span><br><span class="line">	&#125;)();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://disqus.com"</span> <span class="attribute">class</span>=<span class="value">"dsq-brlink"</span>&gt;</span>comments powered by <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"logo-disqus"</span>&gt;</span>Disqus<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>除了<code>disqus_shortname</code>和<code>disqus_identifier</code>， disqus还提供其他参数可配，具体看<a href="https://help.disqus.com/customer/portal/articles/472098-javascript-configuration-variables" target="_blank" rel="external">这里</a></p>
<blockquote>
<p>似乎disqus被墙了，那么还有多说，友言等第三方可供选择。不过我这一没备案的野路子，国内服务还是先别用着吧。估摸着什么时候去备个案才行，不然就算我再根正苗红，GFW也不认啊。<br>电信宽带是好的，似乎是移动宽带的问题。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果你想为你的Ghost博客带来一点社交化的属性，偏偏Ghost官方并没有提供评论功能，而你自己也懒得写一套评论系统，那么使用第三方评论托管，是个不错的选择。<br>]]>
    
    </summary>
    
      <category term="disqus" scheme="http://blog.xiaol.me/tags/disqus/"/>
    
      <category term="ghost" scheme="http://blog.xiaol.me/tags/ghost/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你好，诗祁]]></title>
    <link href="http://blog.xiaol.me/2014/08/24/ni-hao-shi-qi/"/>
    <id>http://blog.xiaol.me/2014/08/24/ni-hao-shi-qi/</id>
    <published>2014-08-24T12:10:18.000Z</published>
    <updated>2015-07-12T13:42:15.326Z</updated>
    <content type="html"><![CDATA[<p>:)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>:)</p>
]]>
    </summary>
    
      <category term="hello" scheme="http://blog.xiaol.me/tags/hello/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[(译)WebRTC实战： STUN, TURN, Signaling]]></title>
    <link href="http://blog.xiaol.me/2014/08/24/webrtc-stun-turn-signaling/"/>
    <id>http://blog.xiaol.me/2014/08/24/webrtc-stun-turn-signaling/</id>
    <published>2014-08-24T11:00:18.000Z</published>
    <updated>2015-07-12T14:52:09.878Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/" target="_blank" rel="external">WebRTC in the real world: STUN, TURN and signaling</a> By <a href="http://www.html5rocks.com/profiles/#dutton" target="_blank" rel="external">Sam Dutton</a></p>
<p>WebRTC 实现了网页点对点交流。<br>但是…<br>WebRTC 仍然需要服务器来:</p>
<ul>
<li>交换客户端元数据协调通讯，即信令(Signaling)。  </li>
<li>应对NATs(Network Address Translators) 和防火墙。  </li>
</ul>
<p>本文将向你展示如何建立一个信令服务器，并使用STUN和TURN服务器来处理实际应用中出现的一些怪异的连接问题。也将解释WebRTC应用是如何处理多方通讯并与类似VoIP、PSTN的服务互动的。</p>
<p>如果你没有了解过WebRTC，我强烈建议你在看这篇文章之前先看看<a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/" target="_blank" rel="external">这篇文章 Getting Started With WebRTC</a><br><a id="more"></a></p>
<h4 id="什么是信令？">什么是信令？</h4><p>信令即协调通讯的过程。WebRTC应用要发起一个对话，客户端就需要交换如下信息:</p>
<ul>
<li>用于打开和关闭通讯的会话信息；</li>
<li>错误信息；</li>
<li>媒体元数据如编解码器及其设置，带宽和媒体类型；</li>
<li>秘钥数据，用于创建安全连接；</li>
<li>网络数据，如外部能访问的主机IP和端口。</li>
</ul>
<p>这个信令过程需要客户端之间能来回传递消息，但是WebRTC APIs并没有提供这种机制的实现，你需要自己创建。下面将描述建立信令服务器的几种方式。不管怎么样，先来点上下文吧…</p>
<h5 id="为什么WebRTC不提供信令实现？">为什么WebRTC不提供信令实现？</h5><p>为了避免冗余，以及做到与现有技术的最大兼容，信令方法和协议都不由WebRTC标准来指定。这些都由JSEP(<a href="http://tools.ietf.org/html/draft-ietf-rtcweb-jsep-03#section-1.1" target="_blank" rel="external">JavaScript Session Establishment Protocol</a>)来概述.</p>
<blockquote>
<p> WebRTC呼叫建立背后的想法已经是完全指定和控制媒体链接，但是尽量托管和应用间的信令连接。<br>由是不同的应用可能会喜欢用不同的协议，比如已存在的SIP、Jungle信令协议，或者也许为了一些新奇的用例而做的特殊应用而自定义的协议。<br>这一节文字要传达的关键信息点是多媒体会话的描述，这个描述指定了必要的传输和建立媒体链接所必要的媒体配置信息。</p>
</blockquote>
<p>JSEP的架构也避免了让浏览器去保存状态，那就是，像一个信令状态机一样工作。这里也许会有一个问题，比如，当页面被刷新时，信令数据会丢失。不过，也可以把这些信令状态存在服务器。</p>
<p><img src="http://7xkc1e.com1.z0.glb.clouddn.com/jsep.png" alt="alt"></p>
<h5 id="JSEP_architecture"><center>JSEP architecture</center></h5><p>JSEP需要offer和answer之间做出之前提到的媒体元数据的信息交换。offer和answer通过Session Description Protocol(SDP)格式来沟通，如下</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">v</span>=0</span><br><span class="line"><span class="constant">o</span>=- 7614219274584779017 2 IN IP4 127.0.0.1</span><br><span class="line"><span class="constant">s</span>=-</span><br><span class="line"><span class="constant">t</span>=0 0</span><br><span class="line"><span class="constant">a</span>=group:BUNDLE audio video</span><br><span class="line"><span class="constant">a</span>=msid-semantic: WMS</span><br><span class="line"><span class="constant">m</span>=audio 1 RTP/SAVPF 111 103 104 0 8 107 106 105 13 126</span><br><span class="line"><span class="constant">c</span>=IN IP4 0.0.0.0</span><br><span class="line"><span class="constant">a</span>=rtcp:1 IN IP4 0.0.0.0</span><br><span class="line"><span class="constant">a</span>=ice-ufrag:W2TGCZw2NZHuwlnf</span><br><span class="line"><span class="constant">a</span>=ice-pwd:xdQEccP40E+P0L5qTyzDgfmW</span><br><span class="line"><span class="constant">a</span>=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level</span><br><span class="line"><span class="constant">a</span>=mid:audio</span><br><span class="line"><span class="constant">a</span>=rtcp-mux</span><br><span class="line"><span class="constant">a</span>=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:9c1AHz27dZ9xPI91YNfSlI67/EMkjHHIHORiClQe</span><br><span class="line"><span class="constant">a</span>=rtpmap:111 opus/48000/2</span><br><span class="line">…</span><br></pre></td></tr></table></figure>
<p>想知道SDP的格式的所有明确含义，可以看看这个<a href="http://datatracker.ietf.org/doc/draft-nandakumar-rtcweb-sdp/?include_text=1" target="_blank" rel="external">IETF examples</a>.<br>请记住WebRTC被设计使得offer或answer可以在被拧在一起之前通过编辑SDP文本来设置好本地或远程描述。比如<a href="https://apprtc.appspot.com/js/main.js" target="_blank" rel="external">apprtc.appspot.com</a>中的<code>preferAudioCodec()</code>方法就被用于设置默认的编解码器和比特率。SDP用Javascript来操作是有点痛苦，所以现在有个讨论是关于WebRTC的未来版本是否可以用JSON格式来替代，不过这里提到了一些坚持使用SDP的<a href="http://tools.ietf.org/html/draft-ietf-rtcweb-jsep-03#section-3.3" target="_blank" rel="external">好处</a>。</p>
<h5 id="RTCPeerConnection_+_信令:_offer,_answer_and_candidate">RTCPeerConnection + 信令: offer, answer and candidate</h5><p>RTCPeerConnection接口被WebRTC应用用于创建各点之间的连接并交流视音频信息。<br>要开始这个过程RTCPeerConnection需要先做两个工作：</p>
<ul>
<li>确定本地媒体情况，比如分辨率和编解码器的能力。这些元数据会用在offeranswer机制中。</li>
<li>获取可能的应用主机网络地址，就死所谓的candidate。</li>
</ul>
<p>当本地信息被确认后，就会通过信令系统与远程终端进行交换。<br>联想下<a href="http://xkcd.com/177/" target="_blank" rel="external">alice is trying to call Eve</a>这幅漫画，发起/响应机制在其中完整的展现出来：</p>
<ul>
<li>Alice创建一个RTCPeerConnection对象。</li>
<li>Alice通过RTCPeerConnection的createOffer()方法创建一个offer(SDP会话描述)。</li>
<li>Alice通过这个offer调用setLocalDescription()。</li>
<li>Alice将offer字符串化并通过信令服务器发给Eve。</li>
<li>Eve通过调用setRemoteDescription()设置Alice的offer,来让自己的RTCPeerConnection知道Alice的设置。</li>
<li>Eve调用createAnswer()和成功回调函数来传递Eve的本地会话描述—answer。</li>
<li>Eve通过setLocalDescription()来将她的本地描述设置到她的answer中。</li>
<li>然后Eve将她字符串化后的answer通过信令服务器发回给Alice。</li>
<li>Alice通过setRemoteDescription()将Eve的anwser设置为远程会话描述。</li>
</ul>
<p>Alice和Eve还需要交换网络信息。’finding candidates’就是通过<a href="http://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment" target="_blank" rel="external">ICE框架</a>找到网络链接和端口的过程。</p>
<ul>
<li>Alice 通过onicecandidate事件处理器来创建RTCPeerConnection对象。</li>
<li>这个事件处理器将在candidates可用时被调用。</li>
<li>在这个处理器中，Alice通过信令服务器将candidate数据字符串化后发送给Eve。</li>
<li>当Eve得到Alice的candidate信息，她将调用addIceCandidate()方法将这个candidate加入自己的远程终端描述中。<br>JSEP支持<a href="http://tools.ietf.org/html/draft-ietf-rtcweb-jsep-03#section-3.4.1" target="_blank" rel="external">ICE Candidate Trickling</a>, 这个可以使呼叫者在初始化offer之后增量的提供candidates给被呼叫者，被呼叫者在这个呼叫中直接开始设置链接而不用等待收到其他candidates。</li>
</ul>
<h5 id="编写WebRTC信令服务">编写WebRTC信令服务</h5><p>下面是一个简略的信令过程<a href="http://www.w3.org/TR/webrtc/#simple-peer-to-peer-example" target="_blank" rel="external">W3C代码示例</a>。这片代码假设已经存在一些信令机制，如SignalingChannel. 下面讨论信令的一些详细细节。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> signalingChannel = <span class="keyword">new</span> SignalingChannel();</span><br><span class="line"><span class="keyword">var</span> configuration = &#123;</span><br><span class="line">  <span class="string">'iceServers'</span>: [&#123;</span><br><span class="line">    <span class="string">'url'</span>: <span class="string">'stun:stun.example.org'</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> pc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call start() to initiate</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  pc = <span class="keyword">new</span> RTCPeerConnection(configuration);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// send any ice candidates to the other peer</span></span><br><span class="line">  pc.onicecandidate = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (evt.candidate)</span><br><span class="line">      signalingChannel.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        <span class="string">'candidate'</span>: evt.candidate</span><br><span class="line">      &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// let the 'negotiationneeded' event trigger offer generation</span></span><br><span class="line">  pc.onnegotiationneeded = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    pc.createOffer(localDescCreated, logError);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// once remote stream arrives, show it in the remote video element</span></span><br><span class="line">  pc.onaddstream = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    remoteView.src = URL.createObjectURL(evt.stream);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get a local stream, show it in a self-view and add it to be sent</span></span><br><span class="line">  navigator.getUserMedia(&#123;</span><br><span class="line">    <span class="string">'audio'</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'video'</span>: <span class="literal">true</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>&#123;</span><br><span class="line">    selfView.src = URL.createObjectURL(stream);</span><br><span class="line">    pc.addStream(stream);</span><br><span class="line">  &#125;, logError);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">localDescCreated</span>(<span class="params">desc</span>) </span>&#123;</span><br><span class="line">  pc.setLocalDescription(desc, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    signalingChannel.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="string">'sdp'</span>: pc.localDescription</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;, logError);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signalingChannel.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!pc)</span><br><span class="line">    start();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(evt.data);</span><br><span class="line">  <span class="keyword">if</span> (message.sdp)</span><br><span class="line">    pc.setRemoteDescription(<span class="keyword">new</span> RTCSessionDescription(message.sdp), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// if we received an offer, we need to answer</span></span><br><span class="line">      <span class="keyword">if</span> (pc.remoteDescription.type == <span class="string">'offer'</span>)</span><br><span class="line">        pc.createAnswer(localDescCreated, logError);</span><br><span class="line">    &#125;, logError);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    pc.addIceCandidate(<span class="keyword">new</span> RTCIceCandidate(message.candidate));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logError</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  log(error.name + <span class="string">': '</span> + error.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要知道这片代码中offer/answer和candidate交换过程是如何运作的，可以看看<a href="http://simpl.info/rtcpeerconnection/" target="_blank" rel="external">simpl.info/pc</a> 中视频聊天示例的控制台记录。如果你需要跟多细节，可以下载完整的WebRTC信令转储，并通过Chrome的 chrome://webrtc-internals 或Opera的 opera://webrtc-internals 页面来统计。</p>
<h5 id="终端的发现">终端的发现</h5><p>要说清楚’我怎么才能找到某人来聊天’挺复杂的。<br>对于电话来说，我们有电话号码目录。对于在线视频聊天，我们需要身份认证以及在线状态管理系统，即用户初始化会话。WebRTC应用需要一种方式来让客户端来互相标识他们是像创建一个聊天室还是加入一个聊天。</p>
<p>WebRTC没有提供终端目录机制，所以我们不会进入这一项。这个过程可以简单的通过邮件或信息分享一个URL，比如 <a href="http://talky.io/" target="_blank" rel="external">talky.io</a>、<a href="http://tawk.com/" target="_blank" rel="external">tawk.com</a> 和 <a href="http://browsermeeting.com/" target="_blank" rel="external">browsermeeting.com</a>这些视频聊天应用中，你邀请别人加入是通过跟他们分享你的自有链接。开发者Chris Ball创建了一个有趣的实验<a href="http://blog.printf.net/articles/2013/05/17/webrtc-without-a-signaling-server/" target="_blank" rel="external">serverless-webrtc</a>让WebRTC的参与者通过IM,email或者信鸽来交换元数据。</p>
<h4 id="要如何建立一个信令服务器?">要如何建立一个信令服务器?<p></p></h4><p>重申一下，信令协议及机制并不由WebRTC标准定义。不管你选择什么，你都需要一个中介服务器来交换客户端之间的信令信息和应用数据。很可惜，网页应用并不能简单的直接冲着英特网说’把我和我的朋友连起来！’．</p>
<p>还好信令信息很小，并且大多数只在一个呼叫的开始才需要交换．在对<a href="http://apprtc.appspot.com/" target="_blank" rel="external">apprtc.appspot.com</a>和<a href="http://samdutton-nodertc.jit.su/" target="_blank" rel="external">samdutton-nodertc.jit.su</a>的测试中我们发现，一个视频聊天会话中，信令服务器总共处理了30-45条消息，所有消息的总大小才10kb左右。</p>
<p>并且对带宽的要求也较低，WebRTC信令服务器并不消耗太多cpu或内存，因为它们只需要做消息中转，并保存少量的会话状态数据(例如，有哪些客户已经连接了)。</p>
<blockquote>
<p><strong>Tip!</strong><br>信令机制可以用来交换会话元数据，也可以用来做应用数据通讯。它就是一个消息服务器。</p>
</blockquote>
<h5 id="从服务器推送消息到客户端">从服务器推送消息到客户端</h5><p>信令的消息服务需要是双向的：客户端发到服务器且服务器发到客户端。双向通讯违反了HTTP协议的客户/服务，请求/响应模型。不过一些hack，比如为了将数据从服务器推送到网页的<a href="https://en.wikipedia.org/wiki/Comet_(programming" target="_blank" rel="external">长轮询</a>)已经出现很多年了。</p>
<p>最近，<a href="http://www.html5rocks.com/en/tutorials/eventsource/basics/" target="_blank" rel="external">EventSource API</a>已被广泛的应用了，他使得服务器通过HTTP发送数据到浏览器成为可能。这里有个简单的<a href="http://simpl.info/es" target="_blank" rel="external">demo</a>。EventSource被设计成单向传递消息，但是它可以和XHR结合构建成交换信令消息的服务器:一个从呼叫者开始传递消息，用XHR请求传输，通过EventSource推送到被呼叫者那去。</p>
<p><a href="http://www.html5rocks.com/en/tutorials/websockets/basics/" target="_blank" rel="external">WebSocket</a>是一个更自然的解决方案，被设计成全双工的客户端/服务器通讯(消息可以同时双向传输)。一个将信令服务器用纯WebSocket或服务器发送事件(EventSource)的型式构建的好处是后台接口可以由各种语言的通用框架公共托管包来实现，比如PHP,Python和Ruby。</p>
<p>大概四分之三的浏览器都<a href="http://caniuse.com/#search=websocket" target="_blank" rel="external">支持WebSocket</a>了，更重要的是，所有支持WebRTC的浏览器都支持WebSocket,不管是桌面端还是移动端。所有连接都需要使用<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="external">TLS</a>，去保证不被截获到未加密的信息，并且减少<a href="http://en.wikipedia.org/wiki/WebSocket#Proxy_traversal" target="_blank" rel="external">proxy traveral</a>引起的问题。(需要更多WebSocket和proxy traversal相关的信息，可以看看Ilya Grigorik的<em>High Performance Browser Networking</em>一书的<a href="http://hpbn.co/webrtc" target="_blank" rel="external">WebRTC章节</a>。Peter Lubber的<a href="http://refcardz.dzone.com/refcardz/html5-websocket" target="_blank" rel="external">WebSocket Cheat Sheet</a>有更多关于WebSocket客户端和服务器端的信息)。</p>
<p><a href="http://apprtc.appspot.com/" target="_blank" rel="external">apprtc.appspot.com</a>WebRTC视频聊天应用的信令是通过<a href="https://developers.google.com/appengine/docs/java/channel/" target="_blank" rel="external">Google App Engine Channel API</a>完成的，这个API用到了<a href="http://en.wikipedia.org/wiki/Comet_(programming" target="_blank" rel="external">Comet</a>)技术(长轮询)去实现信令推送信息(这里有一个App Engine为支持WebSocket<a href="https://code.google.com/p/googleappengine/issues/detail?id=2535" target="_blank" rel="external">存在很久的bug</a>,快去关注这个bug，给它投票别让它沉了!)。<a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/" target="_blank" rel="external">这里</a>有一份这个应用的详细代码。</p>
<p>WebRTC客户端通过ajax轮询获取服务器信息处理信令也是可行的，但是这导致太多冗余的网络请求，尤其对于移动端客户来说更是一个问题。甚至在一个会话建立之后，终端仍需要轮询信令信息去查询是否会话有变化或者会话是否被对方终止了。这个<a href="http://webrtcbook.com/" target="_blank" rel="external">示例</a>使用了该方法，但做了一些轮询频率的优化。</p>
<h5 id="扩展信令服务器规模">扩展信令服务器规模</h5><p>虽然信令服务器对于每个客户来说消耗的带宽和CPU都较少，但是应用流行起来的话依然要处理不同地域的大量的数据，应对高并发。通信量较高的WebRTC应用需要能够应对高负载。</p>
<p>这里我们不会讨论细节，但仍有如下一些为高容量，高性能信息可以注意的点。</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Xmpp" target="_blank" rel="external">eXtensible Messaging and Presence Protocol (XMPP)</a>, 最初被称为Jabber: 一个为即时信息开发的协议，可应用于信令服务，这种XMPP服务器的实现包括<a href="http://en.wikipedia.org/wiki/Ejabberd" target="_blank" rel="external">ejabberd</a>和<a href="http://en.wikipedia.org/wiki/Openfire" target="_blank" rel="external">Openfire</a>.JavaScript客户端如<a href="http://strophe.im/strophejs/" target="_blank" rel="external">Strophe.js</a>使用<a href="http://en.wikipedia.org/wiki/BOSH" target="_blank" rel="external">BOSH</a>模拟双向流，但是因为<a href="http://stackoverflow.com/questions/7327153/xmpp-bosh-vs-comet" target="_blank" rel="external">各种原因</a>，BOSH的效率比不上WebSocket，而且也不易扩展。(话说<a href="http://en.wikipedia.org/wiki/Jingle_(protocol" target="_blank" rel="external">Jingle</a>)是一个使XMPP支持音频和视频的扩展;WebRTC项目使用的网络传输组件<a href="https://developers.google.com/talk/libjingle/" target="_blank" rel="external">libjingle</a>库就是Jingle的C++实现)</li>
<li>开源库如<a href="http://zeromq.org/" target="_blank" rel="external">ZeroMQ</a>(TokBox用在他们的<a href="http://www.tokbox.com/blog/tokbox-builds-it%E2%80%99s-own-internal-messaging-infrastructure/" target="_blank" rel="external">Rumour</a>服务器上)和<a href="http://en.wikipedia.org/wiki/Open_Message_Queue" target="_blank" rel="external">OpenMQ</a>。<a href="http://avalanche123.com/blog/2012/02/25/interacting-with-zeromq-from-the-browser/" target="_blank" rel="external">NullMQ</a>在Web平台应用了ZeroMQ的概念，基于WebSocket使用<a href="http://stomp.github.io/" target="_blank" rel="external">STOMP</a>。</li>
<li>使用WebSocket的商业云消息平台(虽然他们不使用长轮询)如<a href="http://pusher.com/" target="_blank" rel="external">Pusher</a>, <a href="http://kaazing.com/" target="_blank" rel="external">Kaazing</a>和<a href="http://pubnub.com/" target="_blank" rel="external">PubNub</a>。(PubNub还有<a href="https://github.com/pubnub/webrtc" target="_blank" rel="external">WebRTC的接口</a>)</li>
</ul>
<p>(开发者Phil Leggetter的<a href="http://www.leggetter.co.uk/real-time-web-technologies-guide" target="_blank" rel="external">Real-Time Web Technologies Guide</a>提供了一个关于消息服务和代码库的总结性清单。)</p>
<h5 id="在Node上用Socket-io建立信令服务器">在Node上用Socket.io建立信令服务器</h5><p>以下的简单网页应用代码使用到了基于<a href="http://nodejs.org/" target="_blank" rel="external">Node</a>上的<a href="http://socket.io/" target="_blank" rel="external">Socket.io</a>而建立的信令服务器。Socket.io的设计使建立信息交换服务器变得简单，而且它尤其适用于WebRTC信令服务器，因为它内置了’房间’的概念。这个例子不是为产品级别的信令服务器设计的，但是它面向相对较小的用户群工作得很好。</p>
<p>Socket.io除了用WebSocket，还适配以下备用技术:Adobe Flash Socket, AJAX long polling, AJAX multipart streaming, Forever Iframe and JSONP polling. 它有多种后台实现，但是它的Node版本应该是最著名的，我们下面的例子就用的这个版本。</p>
<p>例子中没有WebRTC，这里只是展示网页应用信令该如何设计。查看控制台可以看到客户是如何加入一个房间且交换信息的。我们的<a href="https://bitbucket.org/webrtc/codelab" target="_blank" rel="external">WebRTC codelab</a>有如何将这个例子集成进完整的WebRTC视频聊天应用的步骤。你可以在<a href="https://bitbucket.org/webrtc/codelab/src/master/complete/step5" target="_blank" rel="external">codelab repo第五步</a>下载这些代码，也可以在<a href="http://samdutton-nodertc.jit.su/" target="_blank" rel="external">samdutton-nodertc.jit.su</a>在线试试效果。</p>
<p>index.html的代码如下:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>WebRTC client<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">'/socket.io/socket.io.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">'js/main.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>html中引用的的JavaScript文件main.js代码如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isInitiator;</span><br><span class="line"></span><br><span class="line">room = prompt(<span class="string">'Enter room name:'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> socket = io.connect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (room !== <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Joining room '</span> + room);</span><br><span class="line">  socket.emit(<span class="string">'create or join'</span>, room);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">'full'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">room</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Room '</span> + room + <span class="string">' is full'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">'empty'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">room</span>)</span>&#123;</span><br><span class="line">  isInitiator = <span class="literal">true</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Room '</span> + room + <span class="string">' is empty'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">'join'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">room</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Making request to join room '</span> + room);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'You are the initiator!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">'log'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">array</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, array);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>完整的服务端应用代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> static = <span class="built_in">require</span>(<span class="string">'node-static'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> file = <span class="keyword">new</span>(static.Server)();</span><br><span class="line"><span class="keyword">var</span> app = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  file.serve(req, res);</span><br><span class="line">&#125;).listen(<span class="number">2013</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>).listen(app);</span><br><span class="line"></span><br><span class="line">io.sockets.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// convenience function to log server messages to the client</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> array = [<span class="string">'&gt;&gt;&gt; Message from server: '</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">      array.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">      socket.emit(<span class="string">'log'</span>, array);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">'Got message:'</span>, message);</span><br><span class="line">    <span class="comment">// for a real app, would be room only (not broadcast)</span></span><br><span class="line">    socket.broadcast.emit(<span class="string">'message'</span>, message);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">'create or join'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">room</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> numClients = io.sockets.clients(room).length;</span><br><span class="line"></span><br><span class="line">    log(<span class="string">'Room '</span> + room + <span class="string">' has '</span> + numClients + <span class="string">' client(s)'</span>);</span><br><span class="line">    log(<span class="string">'Request to create or join room '</span> + room);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (numClients === <span class="number">0</span>)&#123;</span><br><span class="line">      socket.join(room);</span><br><span class="line">      socket.emit(<span class="string">'created'</span>, room);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numClients === <span class="number">1</span>) &#123;</span><br><span class="line">      io.sockets.in(room).emit(<span class="string">'join'</span>, room);</span><br><span class="line">      socket.join(room);</span><br><span class="line">      socket.emit(<span class="string">'joined'</span>, room);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// max two clients</span></span><br><span class="line">      socket.emit(<span class="string">'full'</span>, room);</span><br><span class="line">    &#125;</span><br><span class="line">    socket.emit(<span class="string">'emit(): client '</span> + socket.id + <span class="string">' joined room '</span> + room);</span><br><span class="line">    socket.broadcast.emit(<span class="string">'broadcast(): client '</span> + socket.id + <span class="string">' joined room '</span> + room);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>(你并不需要知道这代码中的node-static是啥，它只是让服务器代码简单点。)<br>要在本地启动这个应用，你需要安装Node, socket.io和<a href="https://github.com/cloudhead/node-static" target="_blank" rel="external">node-static</a>。Node可以直接在<a href="http://nodejs.org/" target="_blank" rel="external">官网</a>下载(安装过程很简单)。要安装socket.io和node-static，在你的应用目录终端运行Node包管理器(NPM)就行了.</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> socket.io</span><br><span class="line">npm <span class="keyword">install</span> node-static</span><br></pre></td></tr></table></figure>
<p>要运行应用，只需要在你应用目录里终端运行如下命令:</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node <span class="keyword">server</span>.js</span><br></pre></td></tr></table></figure>
<p>在你的浏览器中打开<code>localhost:2013</code>。在新的标签页或窗口将<code>localhost:2013</code>再打开一次。看看发生了什么，检查下Chrome或Opera的控制台，你可以用通过快捷键<code>Command-Option-J</code>或<code>Ctrl-Shift-J</code>来打开开发者工具DevTool。</p>
<p>不管你选择什么来实现你的信令，你的后台和客户端都至少至少需要提供一个和这个例子类似的服务。</p>
<h5 id="在信令服务器中使用RTCDataChannel">在信令服务器中使用RTCDataChannel</h5><p>信令服务器需要初始化一个WebRTC会话。</p>
<p>然而，当两个终端间的连接建立后，RTCDataChannel理论上可以当作信令通道。这个可以减少信令的延迟并且减少信令服务器带宽和cpu的消耗，因为这样的信息是直接交流的。这里我们没有demo，不过大家仍需留意。</p>
<h5 id="信令陷阱?">信令陷阱?</h5><ul>
<li>在<code>setLocalDescription()</code>方法被调用前RTCPeerConnection都不会开始收集candidates,这是<a href="http://tools.ietf.org/html/draft-ietf-rtcweb-jsep-03#section-4.2.4" target="_blank" rel="external">JSEP IRTF draft</a>中要求的。</li>
<li>利用Trickle ICE(见前文):收到candidates信息立刻调用<code>addIceCandidate()</code>方法。</li>
</ul>
<h5 id="现成的信令服务器">现成的信令服务器</h5><p>如果你不想你自己来做信令服务器，这里有提供一些WebRTC信令服务器，用的也是之前提到的Socket.io，并都集成了WebRTC客户端JavaScript代码库。</p>
<ul>
<li><a href="https://github.com/webRTC/webRTC.io" target="_blank" rel="external">webRTC.io</a>:WebRTC的第一个抽象代码库</li>
<li><a href="https://github.com/priologic/easyrtc" target="_blank" rel="external">easyRTC</a>:全栈WebRTC包</li>
<li><a href="https://github.com/andyet/signalmaster" target="_blank" rel="external">Signalmaster</a>:为<a href="https://github.com/HenrikJoreteg/SimpleWebRTC" target="_blank" rel="external">SimpleWebRTC</a>JavaScript库创建的信令服务器。</li>
</ul>
<p>…如果你压根任何代码都不想写，这里也有一些完全商业化的WebRTC平台如<a href="http://www.vline.com/" target="_blank" rel="external">vLine</a>, <a href="http://tokbox.com/opentok" target="_blank" rel="external">OpenTok</a>,<a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+WebRTC+Support" target="_blank" rel="external">Asterisk</a>.</p>
<p>需要指出来，Ericsson在WebRTC早期就已经用<a href="https://labs.ericsson.com/blog/a-web-rtc-tutorial" target="_blank" rel="external">PHP在Apache上搭了个信令服务器</a>。但是这个现在多少已经废弃了，不过如果你在考虑做类似的事的话，这代码还是值得一看的。</p>
<h5 id="信令安全">信令安全</h5><blockquote>
<p>Security is the art of makeing nothing happen.<br>—<a href="http://t.co/S9cUM7bVfd" target="_blank" rel="external">Salman Rushdie</a></p>
</blockquote>
<p>加密在WebRTC组件中是强制的。</p>
<p>然而，信令机制并不由WebRTC标准所定义，所以让信令更安全就是你自己的事了。如果攻击者试图劫持信令, HTTPS和WSS(i.e TLS),可以保证他们不会拦截到未加密的信息。你也要注意不要在其他用同一个服务器的用户能访问到的地方广播信令信息。</p>
<blockquote>
<p>要保护WebRTC应用，在信令中使用<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="external">TLS</a>是绝对必要的。</p>
</blockquote>
<h4 id="信令之外:使用ICE应付NAT和防火墙">信令之外:使用ICE应付NAT和防火墙</h4><p>对于信令元数据，WebRTC应用使用了中介服务器，但是对于会话建立后的真正媒体数据流，RTCPeerConnection试图让客户终端直连:点对点连接。<br>简单的情况下，每个WebRTC终端都有一个唯一的地址，可以使得各终端都能互相直接通讯。<br>{}<img src="http://7xkc1e.com1.z0.glb.clouddn.com/p2p.png" alt="p2p"></p>
<h5 id="没有NAT和防火墙的情况"><center>没有NAT和防火墙的情况</center></h5><p>但是大多数设备都处于一层或多层<a href="http://www.howstuffworks.com/nat.htm" target="_blank" rel="external">NAT(网络地址转换器)</a>之后，还有杀毒软件的阻挡了一些端口或协议，又或者使用了代理或者防火墙。防火墙和NAT事实上可能在同一设备上，比如家庭无线路由器。<br><img src="http://7xkc1e.com1.z0.glb.clouddn.com/nat.png" alt="nat"></p>
<h5 id="实际情况"><center>实际情况</center></h5><p>WebRTC应用可以使用<a href="https://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment" target="_blank" rel="external">ICE</a>框架来克服实际应用中复杂的网络问题。要使用ICE的话，你的应用必须如下所述的在RTCPeerConnection中传递ICE服务器的URL。</p>
<p>ICE试图找到连接端点的最佳路径。它并行的查找所有可能性，然后选择最有效率的一项。ICE首先用从设备操作系统和网卡上获取的主机地址来尝试连接，如果失败了(比如设备处于NAT之后)，ICE会使用从STUN 服务器获取到的外部地址，如果仍然失败，则交由TURN中继服务器来连接。</p>
<p>换句话说:</p>
<ul>
<li>STUN服务器用于获取设备的外部网络地址</li>
<li>TURN服务器是在点对点失败后用于通信中继。</li>
</ul>
<p>每一个TURN服务器都支持STUN，因为TURN就是在STUN服务器中内建了一个中继功能。ICE也可以应付NAT复杂的设定:实际上，NAR’打洞’会有不止一个公共 IP : port 地址。STUN或TURN服务器的URL由WebRTC中RTCPeerConnection的第一个参数iceServers配置对象可选指定。<a href="http://apprtc.appspot.com/" target="_blank" rel="external">apprtc.appspot.com</a>中的值是这样的:</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'iceServers'</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'url'</span>: <span class="string">'stun:stun.l.google.com:19302'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'url'</span>: <span class="string">'turn:192.158.29.39:3478?transport=udp'</span>,</span><br><span class="line">      <span class="string">'credential'</span>: <span class="string">'JZEOEt2V3Qb0y27GRntt2u2PAYA='</span>,</span><br><span class="line">      <span class="string">'username'</span>: <span class="string">'28224511:1379330808'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'url'</span>: <span class="string">'turn:192.158.29.39:3478?transport=tcp'</span>,</span><br><span class="line">      <span class="string">'credential'</span>: <span class="string">'JZEOEt2V3Qb0y27GRntt2u2PAYA='</span>,</span><br><span class="line">      <span class="string">'username'</span>: <span class="string">'28224511:1379330808'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦RTCPeerConnection中有了这些信息，ICE的神奇就自动展现了: RTCPeerConnection使用ICE框架找到各端点间最合适的路径，必要时选用STUN和TURN服务器。</p>
<h5 id="STUN">STUN</h5><p>NAT在本地私有网络中为设备提供了一个IP地址，但是这个地址并不能被外部识别。没有一个公共地址的话，WebRTC终端是没有办法通信的。要解决这个问题，WebRTC使用了<a href="https://en.wikipedia.org/wiki/STUN" target="_blank" rel="external">STUN</a>。</p>
<p>STUN服务器处于公网中并有个简单任务:检查请求(来自运行于NAT之后的应用)的IP:port 地址，并且将这个地址响应回去。换句话说，NAT后的应用使用STUN服务器来找到他的IP:port 公网地址。这个过程使得WebRTC终端可以找到自己公共访问方法，并通过信令机制将之发送给其他终端，就可以创建一个直连链接。(在实践中，不同的NAT工作方式不同，并有可能有多层NAT，但是原理是一样的。)</p>
<p>STUN服务器并没有做太多东西，也不用记住很多东西，所以一个相对低规格的的STUN服务器可以处理大量的请求。</p>
<p>根据<a href="http://webrtcstats.com/" target="_blank" rel="external">webrtcstats.com</a>的调查，大部分(86%)WebRTC请求都可以通过STUN成功的创建连接，虽然对处于防火墙或者配置复杂的NAT之后的终端要低一些。<br><img src="http://7xkc1e.com1.z0.glb.clouddn.com/stun.png" alt="stun"></p>
<center>用STUN服务器获取公共IP:port 地址</center>

<h5 id="TURN">TURN</h5><p>RTCPeerConnection尝试用UDP协议建立终端间的直连。如果失败了，就尝试TCP协议，还是失败的话,TURN 服务器就会用于做终端间的数据中继。</p>
<p><strong>重申一下：TURN用于中继视频音频数据流，而不是信令数据!</strong></p>
<p>TURN服务器有公共地址，所以他可以被终端联系到，哪怕终端处于防火墙或者代理之后。TURN服务器有一个概念上简单的工作—做数据流中继—但是，不像STUN服务器，它天生需要消耗大量带宽，也就是说，TURN服务器需要很强大。<br><img src="http://7xkc1e.com1.z0.glb.clouddn.com/turn.png" alt="turn"></p>
<h5 id="STUN,TURN和信令"><center>STUN,TURN和信令</center></h5><p>这幅图展现了TURN的运作，纯STUN不能成功的话，各终端将使用TURN服务器。</p>
<h5 id="部署STUN和TURN服务器">部署STUN和TURN服务器</h5><p>Google运行了一个公用的STUN服务器用作测试，<code>stun.l.google.com:19302</code>,<a href="http://apprtc.appspot.com/" target="_blank" rel="external">apprtc.appspot.com</a>用到了它。我们建议使用rfc5766-turn-server当作产品用途的STUN/TURN服务，STUN/TURN服务器的源代码可以在<a href="https://code.google.com/p/rfc5766-turn-server/" target="_blank" rel="external">code.google.com/p/rfc5766-turn-server</a> 找到,这里也提供了一些服务器安装的相关信息链接。<a href="https://groups.google.com/forum/#!msg/discuss-webrtc/X-OeIUC0efs/XW5Wf7Tt1vMJ" target="_blank" rel="external">Amazon Web Services(AWS)也提供了WebRTC的虚拟机镜像</a>。</p>
<p>另一个备选TURN服务器是restund，有<a href="http://www.creytiv.com/restund.html" target="_blank" rel="external">源代码</a>，也可以装到在AWS上。下面是介绍如何将restund装到Google Compute Engine上。</p>
<ol>
<li>防火墙开放tcp=443,udp/tcp=3478</li>
<li>创建4个实例(?)，各自的公用IP，使用标准Ubuntu 12.06镜像</li>
<li>配置本地防火墙(允许所有访问源)</li>
<li>安装工具:<br><code>sudo apt-get install make</code><br><code>sudo apt-get install gcc</code></li>
<li>从<a href="http://creytiv.com/re.html" target="_blank" rel="external">creytiv.com/re.html</a>安装libre</li>
<li>从<a href="http://creytiv.com/restund.html" target="_blank" rel="external">creytiv.com/restund.html</a>获取restund并解包</li>
<li>wget <a href="http://hancke.name/restund-auth.patch" target="_blank" rel="external">hancke.name/restund-auth.patch</a> 并应用<code>patch -p1 &lt; restund-auth.patch</code></li>
<li>对libre和restund运行 make, <code>sudo make install</code></li>
<li>按你自己的需求配置<em>restund.conf</em>(替换IP地址，确保正确的共享密钥)并复制到<code>/etc</code>目录</li>
<li>复制<em>restund/etc/restund</em>到<em>/etc/init.d/</em></li>
<li>配置restund:<br>设置<em>LD_LIBRARY_PATH</em><br>复制<em>restund.conf</em>到<em>/etc/restund.conf</em><br>设置<em>restund.conf</em>使用之前配的IP地址</li>
<li>运行restund</li>
<li>在远程机器运行stund client命令做测试: <code>./client IP:port</code></li>
</ol>
<h4 id="点对点之外:多方WebRTC通讯">点对点之外:多方WebRTC通讯</h4><p>你也许会对Justin Uberti为<a href="http://tools.ietf.org/html/draft-uberti-rtcweb-turn-rest-00" target="_blank" rel="external">REST API for access to TURN Services</a>提出的IETF标准感兴趣。</p>
<p>很容易想到一个超越简单的点对点媒体流用例:比如,同事间的视频会议，或者一个有数百(万)用户的公共演讲。</p>
<p>WebRTC应用可以使用多RTCPeerConnection，让各终端之间以网状配置连接。这就是如<a href="http://talky.io/" target="_blank" rel="external">talky.io</a>这类应用所使用的方法，并且在少量终端的情况下运行的非常良好。不过，CPU和带宽都消耗非常多，尤其是在移动终端上。<br><img src="http://7xkc1e.com1.z0.glb.clouddn.com/mesh.png" alt="mesh"></p>
<h5 id="网状拓扑结构:所有终端都互相连接"><center>网状拓扑结构:所有终端都互相连接</center></h5><p>此外，WebRTC应用可以按星状拓扑结构来选择一个终端分发数据流。在服务器运行一个WebRTC终端来作为重新分配机制也是可行的(webrtc.org提供了一个<a href="https://code.google.com/p/webrtc/source/browse/#svn%2Ftrunk%2Ftalk" target="_blank" rel="external">简单例子</a>)。</p>
<p>从Chrome 31和Opera 18开始，RTCPeerConnection的MediaStream可以当作另一个RTCPeerConnection的输入:这里有个简单演示<a href="http://simpl.info/rtcpeerconnection/multi" target="_blank" rel="external">simpl.info/rtcpeerconnection/multi</a>, 这使得应用结构更灵活，因为它使网络应用通过选择其他终端的连接来处理路由成为可能。</p>
<h5 id="Multipoint_Control_Unit">Multipoint Control Unit</h5><p>对于大量终端的更好选择是使用<a href="https://en.wikipedia.org/wiki/Multipoint_control_unit" target="_blank" rel="external">Multipoint Control Unit(MCU)</a>.这是一个服务器，像大量参与者之间的桥梁一样用于分发媒体信息。MCU可以在一个视频会议中使用多种分辨率，编解码器和帧率，处理转换编码，选择数据流径，调制或录制视频音频。对于多方通话，有一堆问题需要注意: 特别是，如何显示多视频输入和混调多源音频。云平台如<a href="http://www.vline.com/" target="_blank" rel="external">vLine</a>有尝试优化流量路径。</p>
<p>可以考虑买一个MCU的硬件，或者自己做一个。</p>
<center><img src="http://7xkc1e.com1.z0.glb.clouddn.com/mcu.jpg" alt="mcu"></center>

<h5 id="Cisco_MCU的背面"><center><a href="http://cisco.com/en/US/products/ps12283" target="_blank" rel="external">Cisco MCU</a>的背面</center></h5><p>有不少能用的开源MCU软件供选择。比如,<a href="http://lynckia.com/" target="_blank" rel="external">Licode</a>(之前叫Lynckia)就为WebRTC做了一个开源MCU，OpenTok也有一个开源产品<a href="http://www.tokbox.com/blog/mantis-next-generation-cloud-technology-for-webrtc/" target="_blank" rel="external">Mantis</a>。</p>
<h4 id="浏览器之外:_VoIP,_电话和短信">浏览器之外: VoIP, 电话和短信</h4><p>WebRTC的标准性质使得浏览器中运行的WebRTC应用可以和运行其他通信平台的设备或者平台建立通讯，比如电话或者视频会议系统。</p>
<p><a href="http://en.wikipedia.org/wiki/Session_Initiation_Protocol" target="_blank" rel="external">SIP</a>是VoIP和视频会议系统的信令协议。要使WebRTC网页应用能和其他如视频会议系统的SIP客户端通讯，WebRTC需要一个代理服务器做中介信令。信令需要流过网关，但是一旦通信已经建立起来，SRTP(视频和音频)就可以点对点传输。</p>
<p><a href="http://en.wikipedia.org/wiki/Public_switched_telephone_network" target="_blank" rel="external">PSTN</a>(Public Switched Telephone Network)，公用电话交换网络，是所有普通模拟电话的闭路交换网络。要用WebRTC网页应用打电话，流量必须经过PSTN网关。此外，WebRTC网页应用需要用中介XMPP服务器来与<a href="http://en.wikipedia.org/wiki/Jingle_(protocol" target="_blank" rel="external">Jingle</a>)终端如即时通信客户端通讯。<br>Jingle由Google开发来作为XMPP扩展用于支持视频和音频信息:现在WebRTC的实现基于<a href="https://developers.google.com/talk/libjingle/" target="_blank" rel="external">libjingle</a> C++库，这个Jingle的实现刚开始是为Google Talk开发的。</p>
<p>一些应用，代码库和平台利用WebRTC的能力来于外界通讯，如：</p>
<ul>
<li><a href="https://code.google.com/p/sipml5/" target="_blank" rel="external">sipML5</a>：开源JavaScript SIP客户端</li>
<li><a href="http://www.jssip.net/" target="_blank" rel="external">jsSIP</a>：JavaScript SIP代码库</li>
<li><a href="http://phono.com/" target="_blank" rel="external">Phono</a>：开源JavaScript电话接口，作为插件开发</li>
<li><a href="http://zingaya.com/product/" target="_blank" rel="external">Zingaya</a>：嵌入式电话组件</li>
<li><a href="http://www.twilio.com/" target="_blank" rel="external">Twilio</a>：音频消息应用</li>
<li><a href="http://www.uberconference.com/" target="_blank" rel="external">Uberconference</a>：会议系统</li>
</ul>
<p>sipML5的开发们也开发了<a href="https://code.google.com/p/webrtc2sip/" target="_blank" rel="external">webrtc2sip</a>网关。Tethr and Tropo在笔记本上演示过一个<a href="http://tethr.tumblr.com/post/25513708436/tethr-and-tropo-in-the-google-i-o-sandbox" target="_blank" rel="external">救灾通讯框架</a>, 使用<a href="http://en.wikipedia.org/wiki/OpenBTS" target="_blank" rel="external">OpenBTS cell</a>让电脑能通过WebRTC与一个特别的电话通讯。无需电信就能打电话啦！</p>
<h4 id="更多">更多</h4><p>WebRTC <a href="https://bitbucket.org/webrtc/codelab" target="_blank" rel="external">codelab</a>：一步一步介绍如何建立一个视频文字聊天应用，使用了在Node中运行的Socket.io信令服务器。</p>
<p>2013 Google I/O 大会上由WebRTC技术组长Justin Uberti做的<a href="http://www.youtube.com/watch?v=p2HzZkd2A40" target="_blank" rel="external">WebRTC报告</a>。</p>
<p>Chris Wilson在SFHTML5上的报告:<a href="http://www.youtube.com/watch?v=3Ifbqaw5l_I" target="_blank" rel="external">Introduction to WebRTC Apps</a></p>
<p><a href="http://webrtcbook.com/" target="_blank" rel="external">WebRTC Book</a>提供了很多数据和信令路径的详细信息，包括了许多详细的网络拓扑图。</p>
<p><a href="http://www.tokbox.com/blog/webrtc-and-signaling-what-two-years-has-taught-us/" target="_blank" rel="external">WebRTC and Signaling: What Two Years Has Taught Us</a>:TokBox的一篇博文告诉我们为什么要把信令从WebRTC细则中单独拎出来。</p>
<p><a href="http://www.linkedin.com/in/strongben" target="_blank" rel="external">Ben Strong</a>的报告<a href="https://thenewcircle.com/s/post/1548/a_practical_guide_to_building_webrtc_apps_ben_strong_video" target="_blank" rel="external">A Practical Guide to Building WebRTC Apps</a>提供了很多WebRTC拓扑和基础。</p>
<p><a href="http://www.igvita.com/" target="_blank" rel="external">Ilya Grigorik</a>的<em>High Performance Browser Networking</em>一书中的<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch18.html" target="_blank" rel="external">WebRTC章节</a>深入描述了WebRTC结构，用例和性能。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/">WebRTC in the real world: STUN, TURN and signaling</a> By <a href="http://www.html5rocks.com/profiles/#dutton">Sam Dutton</a></p>
<p>WebRTC 实现了网页点对点交流。<br>但是…<br>WebRTC 仍然需要服务器来:</p>
<ul>
<li>交换客户端元数据协调通讯，即信令(Signaling)。  </li>
<li>应对NATs(Network Address Translators) 和防火墙。  </li>
</ul>
<p>本文将向你展示如何建立一个信令服务器，并使用STUN和TURN服务器来处理实际应用中出现的一些怪异的连接问题。也将解释WebRTC应用是如何处理多方通讯并与类似VoIP、PSTN的服务互动的。</p>
<p>如果你没有了解过WebRTC，我强烈建议你在看这篇文章之前先看看<a href="http://www.html5rocks.com/en/tutorials/webrtc/basics/">这篇文章 Getting Started With WebRTC</a><br>]]>
    
    </summary>
    
      <category term="STUN" scheme="http://blog.xiaol.me/tags/STUN/"/>
    
      <category term="TURN" scheme="http://blog.xiaol.me/tags/TURN/"/>
    
      <category term="webrtc" scheme="http://blog.xiaol.me/tags/webrtc/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在国内从googleapis拿字体得注意要lazyload啊]]></title>
    <link href="http://blog.xiaol.me/2014/06/24/css-lazyload-against-render-pending/"/>
    <id>http://blog.xiaol.me/2014/06/24/css-lazyload-against-render-pending/</id>
    <published>2014-06-24T12:10:18.000Z</published>
    <updated>2015-07-12T14:45:41.821Z</updated>
    <content type="html"><![CDATA[<p>起因是在家里上着觉得挺快的博客，到了公司上就白屏很长一段时间，比较郁闷。只好打开调试找原因。</p>
<p>ghost默认用的主题是casper，人用到了从fonts.googleapis.com扒拉下来的牛逼字体。<code>default.hbs</code>写着：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="variable">rel=</span><span class="string">"stylesheet"</span> <span class="variable">type=</span><span class="string">"text/css"</span> <span class="variable">href=</span><span class="string">"//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic|Open+Sans:700,400"</span> /&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>果然是得感谢我们伟大的火墙，谷歌来的必须烧死。于是页面随着这个 request 的 pending 就一直白在那了。</p>
<p>在家shadowsocks用着太爽，到公司毛病才暴露出来。</p>
<p>于是将原来模板里的相关link标签删了，在js里面加上创建该标签的代码。好了，至少不会白屏10好几秒了，暂时就这么先改着吧。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  	  <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</span><br><span class="line">  	  elem.rel = <span class="string">'stylesheet'</span>;</span><br><span class="line">		elem.type = <span class="string">'text/css'</span>;</span><br><span class="line">		elem.href = <span class="string">'//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic|Open+Sans:700,400'</span>;</span><br><span class="line">		<span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">  	&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>起因是在家里上着觉得挺快的博客，到了公司上就白屏很长一段时间，比较郁闷。只好打开调试找原因。</p>
<p>ghost默认用的主题是casper，人用到了从fonts.googleapis.com扒拉下来的牛逼字体。<code>default.hbs</code>写着：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="variable">rel=</span><span class="string">"stylesheet"</span> <span class="variable">type=</span><span class="string">"text/css"</span> <span class="variable">href=</span><span class="string">"//fonts.googleapis.com/css?family=Noto+Serif:400,700,400italic|Open+Sans:700,400"</span> /&gt;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="css" scheme="http://blog.xiaol.me/tags/css/"/>
    
      <category term="google" scheme="http://blog.xiaol.me/tags/google/"/>
    
      <category term="lazy load" scheme="http://blog.xiaol.me/tags/lazy-load/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nginx反向代理 Nodejs PM2]]></title>
    <link href="http://blog.xiaol.me/2014/06/23/nginx-nodejs-pm2/"/>
    <id>http://blog.xiaol.me/2014/06/23/nginx-nodejs-pm2/</id>
    <published>2014-06-23T12:10:18.000Z</published>
    <updated>2015-07-12T14:52:36.062Z</updated>
    <content type="html"><![CDATA[<p>之前博客用的是基于nodejs的ghost，虽然功能还很少，但是做个博客够了，而且部署确实方便。<br>运行服务用到了pm2，反向代理用的nginx。<br><a id="more"></a></p>
<h2 id="PM2运行Nodejs服务">PM2运行Nodejs服务</h2><p>pm2官方给自己的定义是：</p>
<blockquote>
<p>pm2 is a process manager for Node apps with a built-in load balancer.</p>
</blockquote>
<p>负载均衡我还没用到，想想目前也不是必须的，以后再说。简单的用的话，直接pm2 start一个nodejs的server.js文件，不过当然还是建议自己定义的一个<code>&lt;pm2 server list&gt;.json</code>文件。启动参数都定义好，还能一次启动多个服务，以后启动重启都方便多了。<code>pm2 start &lt;pm2 server list&gt;.json</code>, <code>pm2 stop &lt;pm2 server list&gt;.json</code>, <code>pm2 restart &lt;pm2 server list&gt;.json</code>。json文件栗子如下:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  "<span class="attribute">name</span>"        : <span class="value"><span class="string">"my-ghost"</span></span>,</span><br><span class="line">  "<span class="attribute">script</span>"      : <span class="value"><span class="string">"Ghost/index.js"</span></span>,</span><br><span class="line">  "<span class="attribute">cwd</span>"         : <span class="value"><span class="string">"/var/www/blog"</span></span>,</span><br><span class="line">  "<span class="attribute">error_file</span>" : <span class="value"><span class="string">"ghost-err.log"</span></span>,</span><br><span class="line">  "<span class="attribute">out_file</span>"   : <span class="value"><span class="string">"ghost-out.log"</span></span>,</span><br><span class="line">  "<span class="attribute">pid_file</span>"   : <span class="value"><span class="string">"ghost.pid"</span></span>,</span><br><span class="line">  "<span class="attribute">one_launch_only</span>"  : <span class="value"><span class="string">"true"</span></span>,</span><br><span class="line">  "<span class="attribute">env</span>": <span class="value">&#123;</span><br><span class="line">      "<span class="attribute">NODE_ENV</span>": <span class="value"><span class="string">"production"</span></span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;]</span><br></pre></td></tr></table></figure>
<h2 id="Nginx反向代理">Nginx反向代理</h2><p>我的VPS系统是Centos6<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure></p>
<p>安装完毕后<code>nginx -t</code>，这命令是测试配置文件是否正确的，顺带用来找找配置文件在哪了。<br>加入nodejs服务反向代理，挺方便的，就是这句<code>proxy_pass http://localhost:2368;</code><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="title">server_name</span> blog.xiaol.me xiaol.me;</span><br><span class="line"></span><br><span class="line">    <span class="title">location</span> / &#123;</span><br><span class="line">        <span class="title">proxy_pass</span> <span class="url">http://localhost:2368</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后<code>nginx</code>启动。</p>
<p>不知道是不是我用得不对，遇到一个很奇怪的点。因为之前还没打算用反向代理，直接nodejs服务监听80端口的， 这样当pm2 stop nodejs服务后，发现端口依然占用，导致nginx没启动起来。最后没辙还得<code>lsof -i tcp:80</code> <code>kill pid</code>这样。以后有空再看看<code>pm2 stop</code>后端口依然占用的问题吧。</p>
<blockquote>
<p>08/14/2014：<code>pm2 stop</code>仍占用端口，应该用<code>pm2 kill</code></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前博客用的是基于nodejs的ghost，虽然功能还很少，但是做个博客够了，而且部署确实方便。<br>运行服务用到了pm2，反向代理用的nginx。<br>]]>
    
    </summary>
    
      <category term="nginx" scheme="http://blog.xiaol.me/tags/nginx/"/>
    
      <category term="nodejs" scheme="http://blog.xiaol.me/tags/nodejs/"/>
    
      <category term="pm2" scheme="http://blog.xiaol.me/tags/pm2/"/>
    
      <category term="反向代理" scheme="http://blog.xiaol.me/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
</feed>